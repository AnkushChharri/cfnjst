"use client"

import React, { useState, useMemo, useCallback, useRef } from 'react';
import { Check } from 'lucide-react';
import Link from 'next/link';





const styles = [
    { name: 'Basic', convert: (text) => text },
    {
        name: 'Bold', convert: (text) => text.split('').map(char => {
            const code = char.charCodeAt(0);
            return (code >= 65 && code <= 90) || (code >= 97 && code <= 122)
                ? String.fromCodePoint(char.codePointAt(0) + 120205)
                : char;
        }).join('')
    },
    {
        name: 'Italic', convert: (text) => text.split('').map(char => {
            const code = char.charCodeAt(0);
            return (code >= 65 && code <= 90) || (code >= 97 && code <= 122)
                ? String.fromCodePoint(char.codePointAt(0) + 120263)
                : char;
        }).join('')
    },
    {
        name: 'Script', convert: (text) => text.split('').map(char => {
            const code = char.charCodeAt(0);
            return (code >= 65 && code <= 90) || (code >= 97 && code <= 122)
                ? String.fromCodePoint(char.codePointAt(0) + 119951)
                : char;
        }).join('')
    },
    {
        name: 'Double-struck', convert: (text) => text.split('').map(char => {
            const code = char.charCodeAt(0);
            return (code >= 65 && code <= 90) || (code >= 97 && code <= 122)
                ? String.fromCodePoint(char.codePointAt(0) + 120055)
                : char;
        }).join('')
    },
    {
        name: 'Circled',
        convert: (text) => text.split('').map(char => {
            const code = char.toLowerCase().charCodeAt(0);
            if (code >= 97 && code <= 122) {
                return String.fromCodePoint(code - 97 + 9398);
            } else if (code >= 48 && code <= 57) {
                return String.fromCodePoint(code - 48 + 9312);
            }
            return char;
        }).join('')
    },
    {
        name: 'Square',
        convert: (text) => text.split('').map(char => {
            const code = char.toLowerCase().charCodeAt(0);
            if (code >= 97 && code <= 122) {
                return String.fromCodePoint(code - 97 + 127280);
            }
            return char;
        }).join('')
    },
    {
        name: 'Emoji', convert: (text) => {
            const emojiMap = {
                'a': 'üÖ∞Ô∏è', 'b': 'üÖ±Ô∏è', 'c': '¬©Ô∏è', 'd': 'üá©', 'e': '3Ô∏è‚É£', 'f': 'üéè', 'g': 'üá¨', 'h': '‚ôìÔ∏è', 'i': '‚ÑπÔ∏è',
                'j': 'üóæ', 'k': 'üéã', 'l': 'üë¢', 'm': '‚ìÇÔ∏è', 'n': 'üá≥', 'o': 'üÖæÔ∏è', 'p': 'üÖøÔ∏è', 'q': 'üç≥', 'r': '¬ÆÔ∏è',
                's': 'üí≤', 't': '‚úùÔ∏è', 'u': '‚õé', 'v': '‚ôàÔ∏è', 'w': '„Ä∞Ô∏è', 'x': '‚ùå', 'y': 'üí¥', 'z': 'üí§',
                '0': '0Ô∏è‚É£', '1': '1Ô∏è‚É£', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£', '5': '5Ô∏è‚É£', '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£',
                '!': '‚ùó', '?': '‚ùì', '+': '‚ûï', '-': '‚ûñ', '*': '‚ú≥Ô∏è', '/': '‚ûó', '$': 'üí≤', '%': 'üíØ'
            };
            return text.toLowerCase().split('').map(char => emojiMap[char] || char).join('');
        }
    },
    {
        name: 'Symbols', convert: (text) => {
            const symbolMap = {
                'a': '‚ô†Ô∏è', 'b': '‚ô≠', 'c': '‚òæ', 'd': '‚óá', 'e': '‚Ç¨', 'f': '‚ô≠', 'g': '‚ôå', 'h': '‚ôì', 'i': '‚ôæÔ∏è',
                'j': '‚ôÉ', 'k': '‚ò≠', 'l': '¬£', 'm': '‚ôè', 'n': '‚ôë', 'o': '‚òÆÔ∏è', 'p': '‚òß', 'q': '‚ôï', 'r': '‚òà',
                's': '¬ß', 't': '‚ò¶Ô∏è', 'u': '‚òã', 'v': '‚ôà', 'w': '‚ò†Ô∏è', 'x': '‚òì', 'y': '‚òØÔ∏è', 'z': '‚ò¨',
                '0': '‚ìø', '1': '‚ûÄ', '2': '‚ûÅ', '3': '‚ûÇ', '4': '‚ûÉ', '5': '‚ûÑ', '6': '‚ûÖ', '7': '‚ûÜ', '8': '‚ûá', '9': '‚ûà',
                '!': '‚ÄºÔ∏è', '?': '‚ÅâÔ∏è', '+': '‚ûï', '-': '‚ûñ', '*': '‚ú±', '/': '‚àï', '$': 'üí≤', '%': '‚öÜ'
            };
            return text.toLowerCase().split('').map(char => symbolMap[char] || char).join('');
        }
    },
    {
        name: 'Bubble', convert: (text) => {
            const bubbleMap = {
                'a': '‚ìê', 'b': '‚ìë', 'c': '‚ìí', 'd': '‚ìì', 'e': '‚ìî', 'f': '‚ìï', 'g': '‚ìñ', 'h': '‚ìó', 'i': '‚ìò',
                'j': '‚ìô', 'k': '‚ìö', 'l': '‚ìõ', 'm': '‚ìú', 'n': '‚ìù', 'o': '‚ìû', 'p': '‚ìü', 'q': '‚ì†', 'r': '‚ì°',
                's': '‚ì¢', 't': '‚ì£', 'u': '‚ì§', 'v': '‚ì•', 'w': '‚ì¶', 'x': '‚ìß', 'y': '‚ì®', 'z': '‚ì©',
                '0': '‚ì™', '1': '‚ë†', '2': '‚ë°', '3': '‚ë¢', '4': '‚ë£', '5': '‚ë§', '6': '‚ë•', '7': '‚ë¶', '8': '‚ëß', '9': '‚ë®',
                '!': '‚ùó', '?': '‚ùì', '+': '‚äï', '-': '‚äñ', '*': '‚äõ', '/': '‚àï', '$': 'üí≤', '%': '‚ÑÖ'
            };
            return text.toLowerCase().split('').map(char => bubbleMap[char] || char).join('');
        }
    },
    {
        name: 'Inverted', convert: (text) => {
            const inverted = '…êq…îp«ù…ü∆É…•·¥â…æ ûl…Øuodb…πs án å çx éz';
            return text.toLowerCase().split('').map(char => {
                const index = 'abcdefghijklmnopqrstuvwxyz'.indexOf(char);
                return index !== -1 ? inverted[index] : char;
            }).reverse().join('');
        }
    },
    {
        name: 'Fullwidth', convert: (text) => {
            return text.split('').map(char => {
                const code = char.charCodeAt(0);
                if ((code >= 33 && code <= 126) || (code >= 65281 && code <= 65374)) {
                    return String.fromCharCode(code + 65248);
                }
                return char;
            }).join('');
        }
    },
    {
        name: 'Smallcaps', convert: (text) => {
            const smallcaps = '·¥Ä ô·¥Ñ·¥Ö·¥á“ì…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ Äs·¥õ·¥ú·¥†·¥°x è·¥¢';
            return text.toLowerCase().split('').map(char => {
                const index = 'abcdefghijklmnopqrstuvwxyz'.indexOf(char);
                return index !== -1 ? smallcaps[index] : char;
            }).join('');
        }
    },
    {
        name: 'Superscript', convert: (text) => {
            const superscript = '‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞‚Å± ≤·µèÀ°·µê‚Åø·µí·µñq ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª';
            const normal = '0123456789abcdefghijklmnopqrstuvwxyz';
            return text.toLowerCase().split('').map(char => {
                const index = normal.indexOf(char);
                return index !== -1 ? superscript[index] : char;
            }).join('');
        }
    },
    {
        name: 'Subscript', convert: (text) => {
            const subscript = '‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Çêbcd‚Çëfg‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çöq·µ£‚Çõ‚Çú·µ§·µ•w‚Çìyz';
            const normal = '0123456789abcdefghijklmnopqrstuvwxyz';
            return text.toLowerCase().split('').map(char => {
                const index = normal.indexOf(char);
                return index !== -1 ? subscript[index] : char;
            }).join('');
        }
    },
];

const dummyStyle = {
    name: 'Dummy',
    convert: (text) => {
        return text.split('').map(char => char + 'Ã®Ã•Ã¨Ã©Ã™Ã¨').join('');
    }
};

// Custom cache implementation
const createCache = (maxSize = 500) => {
    const cache = new Map();
    return {
        get: (key) => cache.get(key),
        set: (key, value) => {
            if (cache.size >= maxSize) {
                const firstKey = cache.keys().next().value;
                cache.delete(firstKey);
            }
            cache.set(key, value);
        }
    };
};

const UnicodeNameConverter = () => {
    const [name, setName] = useState('Stylish');
    const [copiedStyle, setCopiedStyle] = useState('');
    const [searchTerm, setSearchTerm] = useState('');
    const cacheRef = useRef(createCache());

    const handleCopy = useCallback((text, styleName) => {
        navigator.clipboard.writeText(text);
        setCopiedStyle(styleName);
        setTimeout(() => setCopiedStyle(''), 2000);
    }, []);

    const filteredStyles = useMemo(() =>
        styles.filter(style =>
            style.name.toLowerCase().includes(searchTerm.toLowerCase())
        ),
        [searchTerm]
    );

    const convertedNames = useMemo(() => {
        const allStyles = [dummyStyle, ...filteredStyles];
        return allStyles.reduce((acc, style) => {
            const cacheKey = `${style.name}:${name}`;
            let convertedName = cacheRef.current.get(cacheKey);
            if (!convertedName) {
                convertedName = style.convert(name);
                cacheRef.current.set(cacheKey, convertedName);
            }
            acc[style.name] = convertedName;
            return acc;
        }, {});
    }, [name, filteredStyles]);

    const renderStyleCard = useCallback((style) => (
        <div
            key={style.name}
            className="flex flex-col items-center bg-white p-4 rounded cursor-pointer hover:bg-gray-200 transition-colors duration-200 relative"
            onClick={() => handleCopy(convertedNames[style.name], style.name)}
        >
            <span className="font-serif text-sm mb-2">{style.name}</span>
            <span className="text-xl">{convertedNames[style.name]}</span>
            {copiedStyle === style.name && (
                <div className="absolute top-2 right-2 text-green-600">
                    <Check size={20} />
                </div>
            )}
        </div>
    ), [convertedNames, copiedStyle, handleCopy]);

    return (
        <div className="max-w-7xl m-auto p-1">
            <textarea
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Enter your name"
                className="rounded-md p-4 w-full focus:ring-1 outline-none focus:ring-sky-500 border focus:border-sky-300 ring-zinc-400/75 shadow-sm hover:ring-sky-300 bg-zinc-50 shadow-zinc-600"
            />
            <p className="text-xs font-weight: 500; text-zinc-400">‚¨ÜÔ∏èSearch Your Name and Click on Any Style & Copy‚¨áÔ∏è</p>


            <div className=" text-center pt-5 pb-3 overflow-x-auto" style={{ width: '100%', whiteSpace: 'nowrap' }}>

                <Link href="/" className="text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                    Fancy Font
                </Link>

                <Link href="/DiscordEmoji" className="text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                    Discord Emojis
                </Link>

                <Link href="/ArrowEmoji" className="text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                    Arrow Emoji
                </Link>

                <Link href="/BulletPointSymbol" className="inline-block text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                    Bullet Point Symbol
                </Link>

                <Link href="/ZalgoText" className="inline-block text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-full text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
                    Zalgo Text
                </Link>

            </div>

            <div className="text-center ring-cyan-300 pb-5 pt-3 overflow-x-auto" style={{ width: '100%', whiteSpace: 'nowrap' }}>


                <Link href="/FancyFont/CoolText" className="text-white bg-gradient-to-r from-green-400 via-green-500 to-green-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-green-300 dark:focus:ring-green-800 font-medium rounded-lg text-xs px-3 py-2 text-center me-2 mb-2">
                    Cool Text
                </Link>

                <Link href="/FancyFont/CursedTextGenerator" className="text-white bg-gradient-to-r from-cyan-400 via-cyan-500 to-cyan-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-lg text-xs px-3 py-2 text-center me-2 mb-2">
                    Cursed Text
                </Link>

                <Link href="/FancyFont/CursiveTextGenerator" className="text-white bg-gradient-to-r from-teal-400 via-teal-500 to-teal-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-teal-300 dark:focus:ring-teal-800 font-medium rounded-lg text-xs px-3 py-2 text-center me-2 mb-2">
                    Cursive Text
                </Link>

                <Link href="/FancyFont/FacebookBoldText" className="text-gray-900 bg-gradient-to-r from-lime-200 via-lime-400 to-lime-500 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-lime-300 dark:focus:ring-lime-800 font-medium rounded-lg text-xs px-3 py-2 text-center me-2 mb-2">
                    Facebook Bold Text
                </Link>

                <Link href="/FancyFont/GlitchTextGenerator" className="text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg px-3 py-2 text-xs text-center me-2 mb-2">
                    Glitch Text
                </Link>

                <Link href="/FancyFont/HeartTextSymbol" className="text-white bg-gradient-to-r from-pink-400 via-pink-500 to-pink-600 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-pink-300 dark:focus:ring-pink-800 font-medium rounded-lg text-xs px-3 py-2 text-center me-2 mb-2">
                    Heart Text Symbol
                </Link>

                <Link href="/FancyFont/ItalicTextStyles" className="text-white bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-purple-300 dark:focus:ring-purple-800 font-medium rounded-lg text-xs px-3 py-2 text-center me-2 mb-2">
                    Italic Text
                </Link>

                <Link href="/FancyFont/SmallTextGenerator" className="text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg px-3 py-2 text-xs text-center me-2 mb-2">
                    Small Text
                </Link>



                <Link href="/FancyFont/BoldTextStyles" className="text-white bg-gradient-to-r from-violet-500 via-violet-600 to-violet-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-violet-300 dark:focus:ring-violet-800 font-medium rounded-lg text-xs px-3 py-2 text-center me-2 mb-2">
                    Bold Text
                </Link>





            </div>


            <div className="space-y-4 mt-4">
                {renderStyleCard(dummyStyle)}
                {filteredStyles.map(renderStyleCard)}
            </div>
            {copiedStyle && (
                <div className="mt-4 text-green-600 text-center">Copied: {copiedStyle} style</div>
            )}
        </div>

    );
};

export default UnicodeNameConverter;